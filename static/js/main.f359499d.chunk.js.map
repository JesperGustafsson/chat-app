{"version":3,"sources":["App.js","App2.js","index.js"],"names":["firebase","apps","length","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","analytics","onClick","provider","GoogleAuthProvider","signInWithPopup","ChatRoom","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","console","log","sendMessage","e","a","preventDefault","currentUser","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","map","msg","message","id","onSubmit","value","onChange","target","type","disabled","ChatMessage","props","App","useAuthState","user","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAWCA,IAASC,KAAKC,OASVF,IAASG,MATUH,IAASI,cAAc,CAE7CC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAGjB,IAAMC,EAAOZ,IAASY,OAChBC,EAAYb,IAASa,YAkBrBC,GAjBYd,IAASe,YAiBZ,WAOX,OACJ,4CAAM,wBAAQC,QANa,WACvB,IAAMC,EAAW,IAAIjB,IAASY,KAAKM,mBACnCN,EAAKO,gBAAgBF,IAInB,sCAMAG,EAAW,WAEf,IAAMC,EAAcR,EAAUS,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAHhC,EAKFC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EALc,sBAOaC,mBAAS,IAPtB,mBAOdC,EAPc,KAOHC,EAPG,KASrBC,QAAQC,IAAIL,GAEZ,IAAMM,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQzB,EAAK0B,YAAvBC,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZnB,EAAYoB,IAAI,CACpBC,KAAMZ,EACNa,UAAW3C,IAASa,UAAU+B,WAAWC,kBACzCN,MACAC,aATgB,OAYlBT,EAAa,IAZK,2CAAH,sDAejB,OACA,qCACA,8BACGH,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,CAA0BC,QAASD,GAAjBA,EAAIE,SAEzD,8BACE,uBAAMC,SAAYhB,EAAlB,UACE,uBAAOiB,MAASrB,EAAWsB,SAAW,SAACjB,GAAD,OAAOJ,EAAaI,EAAEkB,OAAOF,UACnE,wBAAQG,KAAM,SAASC,UAAWzB,EAAlC,oCAOA0B,EAAc,SAACC,GAAW,IAAD,EACPA,EAAMT,QAApBN,EADqB,EACrBA,KADqB,EACfH,IACd,OACE,4BAAIG,KAUOgB,EAnFH,WAAO,IAAD,EAEDC,YAAa/C,GAArBgD,EAFS,oBAKhB,OACE,uCAEE,kCACIA,EAAO,cAAC,EAAD,IAAe,cAAC,EAAD,UCzB/B5D,IAASC,KAAKC,OASVF,IAASG,MATUH,IAASI,cAAc,CAE7CC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAGJX,IAASY,OACJZ,IAASa,YACTb,IAASe,YClB3B8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f359499d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\nimport { useState } from 'react';\n\n//import React from 'react'\n\n!firebase.apps.length ? firebase.initializeApp({\n  //your config\n  apiKey: \"AIzaSyDxvOgQi_rEneoxRi9Iag75b-Oy-vLbCaI\",\n  authDomain: \"chat-app-18404.firebaseapp.com\",\n  projectId: \"chat-app-18404\",\n  storageBucket: \"chat-app-18404.appspot.com\",\n  messagingSenderId: \"1020225808869\",\n  appId: \"1:1020225808869:web:fc9b3c705cde795d54e70c\",\n  measurementId: \"G-7EXTG0ETER\"\n}) : firebase.app();\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\nconst App = () => {\n\n  const [user] = useAuthState(auth);\n\n\n  return (\n    <div>\n      App!\n      <section>\n        { user ? <ChatRoom /> : <SignIn /> }\n      </section>\n    </div>\n  )\n}\n\nconst SignIn = () => {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n    return (\n<>    <button onClick={signInWithGoogle}>Sign in with Google</button>\n</>\n    )\n}\n\n\nconst ChatRoom = () => {\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, {idField: 'id'})\n\n  const [formValue, setFormValue] = useState(\"\")\n\n  console.log(messages);\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n  }\n\n  return (\n  <>\n  <div>\n    {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg}/>)}\n  </div>\n  <div>\n    <form onSubmit = {sendMessage}>\n      <input value = {formValue} onChange= {(e) => setFormValue(e.target.value)}></input>\n      <button type =\"submit\" disabled={!formValue}>SEND MESSAGE!</button>\n    </form>\n  </div>\n  </>)\n}\n\n\nconst ChatMessage = (props) => {\n  const { text, uid } = props.message;\n  return (\n    <p>{text}</p>\n  )\n}\n\nconst SignOut = () => {\n  return auth.currentUser && (\n    <button onClick={auth.signOut()}>Sign Out!!!</button>\n  )\n}\n\nexport default App","import React, { useRef, useState } from 'react';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n!firebase.apps.length ? firebase.initializeApp({\n  //your config\n  apiKey: \"AIzaSyDxvOgQi_rEneoxRi9Iag75b-Oy-vLbCaI\",\n  authDomain: \"chat-app-18404.firebaseapp.com\",\n  projectId: \"chat-app-18404\",\n  storageBucket: \"chat-app-18404.appspot.com\",\n  messagingSenderId: \"1020225808869\",\n  appId: \"1:1020225808869:web:fc9b3c705cde795d54e70c\",\n  measurementId: \"G-7EXTG0ETER\"\n}) : firebase.app();\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\n\nfunction App2() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\n      <p>Do not violate the community guidelines or you will be banned for life!</p>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n\n    </form>\n  </>)\n}\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\n\nexport default App2;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport App2 from './App2';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}